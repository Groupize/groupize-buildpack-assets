#!/usr/bin/env ruby

require "aws-sdk-s3"

if ENV["S3_BUCKET_NAME"].nil? || ENV["AWS_ACCESS_KEY_ID"].nil? || ENV["AWS_SECRET_ACCESS_KEY"].nil?
  puts "Unable to upload assets"
  exit 0
end

puts Dir.getwd

region = ENV.fetch("AWS_REGION", "us-east-1")

bucket = Aws::S3::Resource.new(region: region).bucket(ENV["S3_BUCKET_NAME"])

Dir.glob("public/packs/js/**/*.js").each do |file| # rubocop:disable Metrics/BlockLength
  file_short_name = file.gsub(/public\/packs\/js\//, "")
  puts "Processing: #{file_short_name}"

  # Temp: Will remove from webpack config once I have this working. For now just delete the bad mapping files.
  File.delete("#{file}.map")
  File.delete("#{file}.map.gz")

  `./node_modules/terser/bin/terser #{file} -o #{file} -c -m --source-map "url='#{bucket.url}/assets/#{file_short_name}.map.gz'"`
  `gzip -k #{file}`
  `gzip -k #{file}.map`

  begin
    s3 = Aws::S3::Resource.new(region: region)
    obj = s3.bucket(ENV["S3_BUCKET_NAME"]).object("assets/#{file_short_name}.map.gz")
    obj.upload_file("#{file}.map.gz", { acl: "public-read" })
  rescue StandardError => e
    puts "Error uploading object: #{e.message}"
  end

  begin
    s3 = Aws::S3::Resource.new(region: region)
    obj = s3.bucket(ENV["S3_BUCKET_NAME"]).object("assets/#{file_short_name}.gz")
    obj.upload_file("#{file}.gz", { acl: "public-read" })
  rescue StandardError => e
    puts "Error uploading gzipped JS: #{e.message}"
  end

  File.delete(file)
  File.delete("#{file}.map")
  File.delete("#{file}.map.gz")
end
