#!/usr/bin/env ruby

require "aws-sdk-s3"

if ENV["S3_BUCKET_NAME"].nil? || ENV["AWS_ACCESS_KEY_ID"].nil? || ENV["AWS_SECRET_ACCESS_KEY"].nil?
  puts "Unable to upload assets"
  exit 0
end

puts Dir.getwd

region = ENV.fetch("AWS_REGION", "us-east-1")
mapping_list = []

Dir.glob("public/packs/js/**/*.js").each do |file| # rubocop:disable Metrics/BlockLength
  file_short_name = file.gsub(/public\/packs\/js\//, "")
  puts "Processing: #{file_short_name}"

  `./node_modules/terser/bin/terser #{file} -o #{file} -c -m`

  begin
    asset_name = "assets/#{file_short_name}.map.gz"
    s3 = Aws::S3::Resource.new(region: region)
    obj = s3.bucket(ENV["S3_BUCKET_NAME"]).object(asset_name)
    obj.upload_file("#{file}.map.gz", { acl: "public-read" })
    File.open(file, "a") do |f|
      f.puts("\n//# sourceMappingURL=#{obj.public_url}")
    end
    mapping_list << asset_name
  rescue StandardError => e
    puts "Error uploading object: #{e.message}"
  end

  `gzip -k #{file}`

  begin
    s3 = Aws::S3::Resource.new(region: region)
    obj = s3.bucket(ENV["S3_BUCKET_NAME"]).object("assets/#{file_short_name}.gz")
    obj.upload_file("#{file}.gz", { acl: "public-read" })
  rescue StandardError => e
    puts "Error uploading gzipped JS: #{e.message}"
  end

  File.delete(file)
  File.delete("#{file}.map")
  File.delete("#{file}.map.gz")
end

File.open("mapping_files.txt", "w+") do |f|
  mapping_list.each { |map| f.puts(map) }
end

begin
  s3 = Aws::S3::Resource.new(region: region)
  obj = s3.bucket(ENV["S3_BUCKET_NAME"]).object("assets/mapping_files.txt")
  obj.upload_file("mapping_files.txt")
rescue StandardError => e
  Rails.logger.error "Error uploading mapping list: #{e.message}"
end

File.delete("mapping_files.txt")
